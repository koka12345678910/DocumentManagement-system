import os
import time
import requests
import json
from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from config import TOKEN, FTP_HOST, FTP_PORT, FTP_USER, FTP_PASS, DOWNLOAD_PATH, DOWNLOAD_FILE
from ocr_utils import ocr_process_image
from ftp_utils import connect_ftp, download_file, list_files, upload_file
from search_utils import search_document
BASE_URL = f"https://api.telegram.org/bot{TOKEN}"
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ update_id
last_update_id = None
greeted_users = set()

def get_updates():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram API.
    """
    global last_update_id
    url = f"{BASE_URL}/getUpdates"
    params = {'offset': last_update_id + 1} if last_update_id else {}

    try:
        response = requests.get(url, params=params)
        response.raise_for_status()
        updates = response.json()

        if 'result' in updates:
            for update in updates['result']:
                handle_update(update)
                last_update_id = update['update_id']

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")

def send_message(chat_id, text, reply_markup=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram API.
    """
    print(f"[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {text}")
    url = f"{BASE_URL}/sendMessage"
    data = {'chat_id': chat_id, 'text': text}
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup.to_dict())
    response = requests.post(url, data=data)
    print(f"[INFO] –û—Ç–≤–µ—Ç –æ—Ç Telegram API –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code}, {response.text}")

def send_persistent_keyboard(chat_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            ["üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã", "üóÇ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"],  # –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É –∑–¥–µ—Å—å
        ],
        resize_keyboard=True,
        one_time_keyboard=False  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    )
    send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

def send_inline_keyboard(chat_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    buttons = [
        [InlineKeyboardButton("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", callback_data="show_files")],
        [InlineKeyboardButton("üóÇ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", callback_data="list_files")]  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    ]
    keyboard = InlineKeyboardMarkup(buttons)
    send_message(chat_id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∞–π–ª–∞–º–∏:", reply_markup=keyboard)

def handle_update(update):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
    """
    if 'message' in update:
        message = update['message']
        chat_id = message['chat']['id']

        if 'photo' in message:
            file_id = message['photo'][-1]['file_id']
            handle_image(chat_id, file_id)
        elif 'document' in message:
            file_id = message['document']['file_id']
            handle_document(chat_id, file_id, message['document']['file_name'])
        elif 'text' in message:
            user_text = message['text']
            if user_text == "/start":
                if chat_id not in greeted_users:
                    send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.")
                    send_persistent_keyboard(chat_id)
                    send_inline_keyboard(chat_id)
                    save_user(chat_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                else:
                    send_message(chat_id, "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")
            elif user_text == "üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã":
                show_files(chat_id)
            else:
                handle_text(chat_id, user_text)
        else:
            send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç.")
    elif 'callback_query' in update:
        handle_callback_query(update['callback_query'])

def handle_text(chat_id, user_text):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞ FTP-—Å–µ—Ä–≤–µ—Ä–µ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∏ –∏–º–µ–Ω–∞–º —Ñ–∞–π–ª–æ–≤.
    """
    try:
        print(f"[INFO] –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_text}")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP
        print(f"[INFO] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP —Å–µ—Ä–≤–µ—Ä—É: {FTP_HOST}")
        ftp = connect_ftp(FTP_HOST, FTP_PORT, FTP_USER, FTP_PASS)
        remote_files = list_files(ftp, '/upload')
        print(f"[INFO] –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ FTP —Å–µ—Ä–≤–µ—Ä–µ: {remote_files}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∏–º–µ–Ω–∞–º —Ñ–∞–π–ª–æ–≤
        matched_files_by_name = [
            remote_file for remote_file in remote_files if user_text.lower() in remote_file.lower()
        ]
        print(f"[INFO] –§–∞–π–ª—ã —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º –≤ –∏–º–µ–Ω–∏: {matched_files_by_name}")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Å FTP
        local_dir = f"{DOWNLOAD_PATH}/upload"
        os.makedirs(local_dir, exist_ok=True)
        print(f"[INFO] –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤: {local_dir}")
        for remote_file in remote_files:
            local_file_path = f"{local_dir}/{os.path.basename(remote_file)}"
            print(f"[INFO] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å FTP: {remote_file} -> {local_file_path}")
            download_file(ftp, remote_file, local_file_path)

        # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        print(f"[INFO] –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É...")
        matches_by_content = search_document(local_dir, user_text)

        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        all_matches = set(matched_files_by_name)
        all_matches.update(f"/upload/{os.path.basename(match)}" for match in matches_by_content)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
        if all_matches:
            for match in all_matches:
                send_file(chat_id, ftp, match)
        else:
            send_message(chat_id, "–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            print(f"[INFO] –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.")

def handle_callback_query(callback_query):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏.
    """
    chat_id = callback_query['message']['chat']['id']
    callback_data = callback_query['data']

    if callback_data == "show_files":
        show_files(chat_id)
    elif callback_data == "list_files":  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤"
        handle_list_files_button(chat_id)

def handle_list_files_button(chat_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–∞ FTP-—Å–µ—Ä–≤–µ—Ä–µ.
    """
    try:
        print(f"[INFO] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP —Å–µ—Ä–≤–µ—Ä—É –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∞–π–ª–æ–≤: {FTP_HOST}")
        ftp = connect_ftp(FTP_HOST, FTP_PORT, FTP_USER, FTP_PASS)
        remote_files = list_files(ftp, '/upload')
        ftp.quit()

        if remote_files:
            files_list = "\n".join(remote_files)
            send_message(chat_id, f"–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:\n\n{files_list}")
            print(f"[INFO] –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {files_list}")
        else:
            send_message(chat_id, "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.")
            print("[INFO] –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤.")

def show_files(chat_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å FTP-—Å–µ—Ä–≤–µ—Ä–∞.
    """
    try:
        print(f"[INFO] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP —Å–µ—Ä–≤–µ—Ä—É: {FTP_HOST}")
        ftp = connect_ftp(FTP_HOST, FTP_PORT, FTP_USER, FTP_PASS)
        remote_files = list_files(ftp, '/upload')
        ftp.quit()

        if remote_files:
            files_list = "\n".join(remote_files)
            send_message(chat_id, f"–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:\n\n{files_list}")
        else:
            send_message(chat_id, "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤.")

def is_first_interaction(chat_id):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –∏–Ω—Ç–µ—Ä–∞–∫—Ü–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    return chat_id not in greeted_users

def save_user(chat_id):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫.
    """
    greeted_users.add(chat_id)

def send_file(chat_id, ftp, remote_file):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∞–≤ –µ–≥–æ —Å FTP-—Å–µ—Ä–≤–µ—Ä–∞.
    """
    local_temp_path = f"{DOWNLOAD_PATH}/{os.path.basename(remote_file)}"

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å FTP
        print(f"[INFO] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {remote_file} —Å FTP –Ω–∞ {local_temp_path}")
        with open(local_temp_path, 'wb') as f:
            ftp.retrbinary(f"RETR {remote_file}", f.write)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram API
        print(f"[INFO] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {local_temp_path}")
        url = f"{BASE_URL}/sendDocument"
        with open(local_temp_path, 'rb') as f:
            response = requests.post(url, data={'chat_id': chat_id}, files={'document': f})

        if response.status_code == 200:
            print(f"[INFO] –§–∞–π–ª {remote_file} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        else:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {response.status_code}, {response.text}")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ {remote_file}: {e}")

    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(local_temp_path):
            os.remove(local_temp_path)

def handle_image(chat_id, file_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç OCR, –∏—â–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞ FTP-—Å–µ—Ä–≤–µ—Ä–µ.
    """
    try:
        print(f"[INFO] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ —Å file_id: {file_id}")
        file_info = requests.get(f"{BASE_URL}/getFile", params={"file_id": file_id}).json()
        file_path = file_info['result']['file_path']
        file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"
        local_image_path = f"{DOWNLOAD_PATH}/{file_id}.jpg"

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        print(f"[INFO] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL: {file_url}")
        with open(local_image_path, 'wb') as f:
            f.write(requests.get(file_url).content)
        print(f"[INFO] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {local_image_path}")

        # OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞
        print(f"[INFO] –ó–∞–ø—É—Å–∫ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {local_image_path}")
        extracted_text = ocr_process_image(local_image_path)

        # –ï—Å–ª–∏ OCR –Ω–µ –Ω–∞—à—ë–ª —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not extracted_text.strip():
            send_message(chat_id, "–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ñ–∞–π–ª–∞.")
            return

        print(f"[INFO] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {extracted_text}")



        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP –∏ –ø–æ–∏—Å–∫
        print(f"[INFO] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP —Å–µ—Ä–≤–µ—Ä—É: {FTP_HOST}")
        ftp = connect_ftp(FTP_HOST, FTP_PORT, FTP_USER, FTP_PASS)
        remote_files = list_files(ftp, '/upload')
        print(f"[INFO] –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –Ω–∞ FTP —Å–µ—Ä–≤–µ—Ä–µ: {remote_files}")

        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å FTP
        local_dir = f"{DOWNLOAD_PATH}/uploads"
        os.makedirs(local_dir, exist_ok=True)
        print(f"[INFO] –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤: {local_dir}")
        for remote_file in remote_files:
            local_file_path = f"{local_dir}/{os.path.basename(remote_file)}"
            print(f"[INFO] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å FTP: {remote_file} -> {local_file_path}")
            download_file(ftp, remote_file, local_file_path)

        # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        print(f"[INFO] –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ —Ç–µ–∫—Å—Ç—É...")
        matches = search_document(local_dir, extracted_text)

        if matches:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏
            for match in matches:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –ø—É—Ç—å –Ω–∞ FTP
                remote_file = f"/upload/{os.path.basename(match)}"
                send_file(chat_id, ftp, remote_file)
        else:
            send_message(chat_id, "–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            print(f"[INFO] –°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞.")

def handle_document(chat_id, file_id, file_name):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç, –∑–∞–≥—Ä—É–∂–∞—è –µ–≥–æ –Ω–∞ FTP-—Å–µ—Ä–≤–µ—Ä.
    """
    try:
        print(f"[INFO] –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ —Å file_id: {file_id}")
        file_info = requests.get(f"{BASE_URL}/getFile", params={"file_id": file_id}).json()

        file_path = file_info['result']['file_path']
        file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file_path}"
        local_file_path = f"{DOWNLOAD_FILE}/{file_name}"

        # –°–∫–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        print(f"[INFO] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ URL: {file_url}")
        response = requests.get(file_url)
        response.raise_for_status()

        with open(local_file_path, 'wb') as f:
            f.write(response.content)
        print(f"[INFO] –î–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {local_file_path}")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        print(f"[INFO] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ FTP —Å–µ—Ä–≤–µ—Ä—É: {FTP_HOST}")
        ftp = connect_ftp(FTP_HOST, FTP_PORT, FTP_USER, FTP_PASS)
        remote_file_path = f"/upload/{file_name}"

        try:
            upload_file(ftp, local_file_path, remote_file_path)
            send_message(chat_id, f"‚úÖ –§–∞–π–ª *{file_name}* —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
            print(f"[INFO] –§–∞–π–ª {file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")
        except Exception as upload_error:
            print(f"[WARN] –û—à–∏–±–∫–∞ –ø—Ä–∏ upload_file: {upload_error}")
            try:
                # –ü—Ä–æ–≤–µ—Ä–∏–º, –ø–æ—è–≤–∏–ª—Å—è –ª–∏ —Ñ–∞–π–ª –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É
                files_list = ftp.nlst("/upload/")
                if file_name in files_list:
                    send_message(chat_id, f"‚ö† –§–∞–π–ª *{file_name}* –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ —Å–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:\n`{upload_error}`")
                    print(f"[INFO] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {upload_error}")
                else:
                    raise upload_error  # –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è ‚Äî –ø—Ä–æ–±—Ä–æ—Å–∏–º
            except Exception as check_error:
                print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞: {check_error}")

    except Exception as e:
        print(f"[ERROR] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")

if __name__ == "__main__":
    print("[INFO] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    while True:
        try:
            get_updates()
            time.sleep(1)  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        except Exception as e:
            print(f"[ERROR] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–µ—Ç–ª–µ: {e}")
            time.sleep(5)